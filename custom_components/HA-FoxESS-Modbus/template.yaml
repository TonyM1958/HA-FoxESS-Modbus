---
#-----------------------------------------------------------------------------
# START: template.yaml include file for HA-FoxESS-Modbus
#-----------------------------------------------------------------------------
# Version: 1.6.6
# Date:    28/08/2025

# these templates perform maths operations on sensor values to create derrived values

- sensor:
    # total battery size
    - name: "Battery Specification"
      unique_id: foxess_inv1_battery_specification
      device_class: energy_storage
      unit_of_measurement: "kWh"
      state_class: measurement
      state: >
        {% set c = states('input_number.battery_size') | float(default=2.56) %}
        {% set n = states('sensor.battery_count') | float(default=0) %}
        {% set result = c * n | round(2) if n > 0 and c > 0 else None %}
        {{ result }}
    # work out the number of batteries
    - name: "Battery Count"
      unique_id: foxess_inv1_battery_count
      state_class: measurement
      state: >
        {% set result = 1 if states('sensor.battery_1_version_code') | int(default=0) > 0 else 0 %}
        {% set result = 2 if states('sensor.battery_2_version_code') | int(default=0) > 0 else result %}
        {% set result = 3 if states('sensor.battery_3_version_code') | int(default=0) > 0 else result %}
        {% set result = 4 if states('sensor.battery_4_version_code') | int(default=0) > 0 else result %}
        {% set result = 5 if states('sensor.battery_5_version_code') | int(default=0) > 0 else result %}
        {% set result = 6 if states('sensor.battery_6_version_code') | int(default=0) > 0 else result %}
        {% set result = 7 if states('sensor.battery_7_version_code') | int(default=0) > 0 else result %}
        {% set result = 8 if states('sensor.battery_8_version_code') | int(default=0) > 0 else result %}
        {{ result }}
    # battery energy throughput for warranty period
    - name: "Battery Throughput"
      unique_id: foxess_inv1_battery_throughput
      state_class: measurement
      state: >
        {% set size = states('input_number.battery_size') | float(default=0) %}
        {% set count = states('sensor.battery_count') | float(default=0) %}
        {% set allowance =  8200 if size >=  2.45 else 0 %}
        {% set allowance =  9100 if size >=  2.56 else allowance %}
        {% set allowance = 10000 if size >=  2.76 else allowance %}
        {% set allowance = 10100 if size >=  2.88 else allowance %}
        {% set allowance = 10500 if size >=  3.30 else allowance %}
        {% set allowance = 14500 if size >=  4.03 else allowance %}
        {% set allowance = 14900 if size >=  4.14 else allowance %}
        {% set allowance = 16700 if size >=  4.66 else allowance %}
        {% set allowance = 18200 if size >=  4.92 else allowance %}
        {% set allowance = 16200 if size >=  5.18 else allowance %}
        {% set allowance = 33400 if size >= 10.36 else allowance %}
        {% set result = (allowance * count) | round(2) if allowance > 0 and count > 0 else None %}
        {{ result }}
    # battery capacity
    - name: "Battery Capacity"
      unique_id: foxess_inv1_battery_capacity
      device_class: energy_storage
      unit_of_measurement: "kWh"
      state_class: measurement
      state: >
        {% set handling = states('input_number.residual_handling') | int(default=0) %}
        {% set capacity = states('sensor.battery_specification') | float(default=0) %}
        {% set remaining = states('sensor.bms_kwh_remaining') | float(default=0) %}
        {% set soc = states('sensor.battery_soc') | float(default=0) %}
        {% set days = states('sensor.installed_days') | float(default=0) %}
        {% set result = (capacity * (0.975 ** (days / 365))) | round(2) if handling == 0 and capacity > 0 else None %}
        {% set result = (remaining * 100 / soc) | round(2) if handling == 1 and remaining > 0 and soc > 0 else result %}
        {% set result = remaining if handling == 2 and remaining > 0 else result %}
        {{ result }}
    # battery state of health
    - name: "Battery SoH"
      unique_id: foxess_inv1_battery_soh
      unit_of_measurement: "%"
      state_class: measurement
      state: >
        {% set capacity = states('sensor.battery_specification') | float(default=0) * 1.0 %}
        {% set current = states('sensor.battery_capacity') | float(default=0) %}
        {% set result = (current / capacity * 100) | round(1) if current > 0 and capacity > 0 else None %}
        {{ result }}
    # battery state
    - name: "Battery State"
      unique_id: foxess_inv1_battery_state
      state: >
        {% set current = states('sensor.invbatcurrent') | float(default=0) %}
        {% set result = 'Charging' if current < -0.1 else 'Idle' %}
        {% set result = 'Discharging' if current > 0.1 else result %}
        {{ result }}
    # the energy in battery
    - name: "Battery Energy"
      unique_id: foxess_inv1_battery_energy
      device_class: energy_storage
      unit_of_measurement: "kWh"
      state_class: measurement
      state: >
        {% set capacity = states('sensor.battery_capacity') | float(default=0) %}
        {% set soc = states('sensor.battery_soc') | float(default=0) %}
        {% set result = (capacity * soc / 100) | round(2) if capacity > 0 and soc > 0 else None %}
        {{ result }}
    # the number of hours that the battery can power the current load for with
    # 5% loss allowance for converting battery DC to house AC power
    - name: "Battery Duration"
      unique_id: foxess_inv1_battery_duration
      icon: "mdi:timer-play"
      unit_of_measurement: "hours"
      state_class: measurement
      state: >
        {% set capacity = states('sensor.battery_capacity') | float(default=0) %}
        {% set min_soc = states('sensor.min_soc_on_grid') | float(default=10) %}
        {% set reserve = capacity * min_soc / 100 %}
        {% set energy = states('sensor.battery_energy') | float(default=0) %}
        {% set power = states('sensor.load_power_rolling') | float(default=0) * 1.05 %}
        {% set hours = ((energy - reserve) / power) | round(1) if energy > 0 and reserve > 0 and power > 0 else 0  %}
        {% set hours = 0 if hours is number and hours < 0 else hours  %}
        {% set hours = 48 if hours is number and hours > 48 else hours  %}
        {{ hours }}
    # the number of hours that the battery can power the current load for with
    # 5% loss allowance for converting battery DC to house AC power
    - name: "Battery End Time"
      unique_id: foxess_inv1_battery_end_time
      icon: "mdi:timer-play"
      state: >
        {% set duration = states('sensor.battery_duration') | float(default=0) %}
        {% set date_now = as_timestamp(now()) %}
        {% set tod = (date_now + duration * 60 * 60) | timestamp_custom('%H:%M') %}
        {% set days = (duration / 24) | int | string %}
        {% set result = (tod + ' / ' + days + 'd') if duration > 0 else 'Empty' %}
        {{ result }}
    # cell imbalance as % using the difference between min and max cell voltage
    - name: "Battery Cell Imbalance"
      unique_id: foxess_inv1_battery_cell_imbalance
      unit_of_measurement: "%"
      state_class: measurement
      state: >
        {% set cell_high = states('sensor.bms_cell_mv_high') | float(default=0) %}
        {% set cell_low = states('sensor.bms_cell_mv_low') | float(default=0) %}
        {% set result = (((cell_high - cell_low) | abs) / (cell_high + cell_low) * 200) | round(2) if cell_high > 0 and cell_low > 0 else None %}
        {{ result }}
    # average cell temperature using the min and max cell temperature
    - name: "Battery Cell Temperature"
      unique_id: foxess_inv1_battery_cell_temperature
      device_class: temperature
      unit_of_measurement: "Â°C"
      state_class: measurement
      state: >
        {% set temp_high = states('sensor.bms_cell_temp_high') | float(default=-50) %}
        {% set temp_low = states('sensor.bms_cell_temp_low') | float(default=-50) %}
        {% set result = ((temp_high + temp_low) / 2) | round(1) if temp_high > -50 and temp_low > -50 else None %}
        {{ result }}
    # the amount of energy taken from the battery today
    - name: "Battery Production"
      unique_id: foxess_inv1_battery_production
      unit_of_measurement: "kWh"
      state_class: measurement
      state: >
        {% set discharge = states('sensor.bat_discharge_daily') | float(default=-1) %}
        {% set charge = states('sensor.bat_charge_daily') | float(default=-1) %}
        {% set result = (discharge - charge) | round(3) if charge >= 0.0 and discharge >= 0.0 else 0 %}
        {{ result }}
    # days since the system was installed
    - name: "Installed Days"
      unique_id: foxess_inv1_installed_days
      unit_of_measurement: "days"
      state: >
        {% set date_install = as_timestamp(states('input_datetime.install_date')) %}
        {% set date_now = as_timestamp(now()) %}
        {% set days = (date_now - date_install) | int // 60 // 60 // 24 %}
        {{ days }}
    # set to 1 if Inverter versions are encoded in hex instead of decimal
    - name: "Hex Encoding"
      unique_id: foxess_inv1_hex_encoding
      state: >
        {% set model = states('sensor.inverter_model') %}
        {% set manager =  states('sensor.manager_version_code') | int(default=0) %}
        {% set result = 1 if 'G2' in model else 0 %}
        {% set result = 1 if model[0] == 'K' and manager > 118 else result %}
        {{ result }}
    # years of battery life remaining, based on available cycles
    - name: "Battery Life Remaining"
      unique_id: foxess_inv1_battery_life_remaining
      unit_of_measurement: "years"
      state_class: measurement
      state: >
        {% set days = states('sensor.installed_days') | float(default=0) %}
        {% set cycles = states('sensor.bms_cycle_count') | float(default=0) %}
        {% set available = states('input_number.battery_cycles_available') | float(default=6000) %}
        {% set result = ((days / cycles * available - days) / 365) | round(1) if days > 0 and cycles > 0 else None %}
        {{ result }}
    # years of battery life remaining, based on energy throughput
    - name: "Battery Warranty Remaining"
      unique_id: foxess_inv1_battery_warranty_remaining
      unit_of_measurement: "years"
      state_class: measurement
      state: >
        {% set days = states('sensor.installed_days') | float(default=0) %}
        {% set used = states('sensor.battery_energy_total') | float(default=0) %}
        {% set available = states('sensor.battery_throughput') | float(default=0) %}
        {% set result = ((days / used * available - days) / 365) | round(1) if days > 0 and used > 0 and available > 0 else None %}
        {{ result }}
    # battery efficiency, total discharge / charge %
    - name: "Battery Efficiency Total"
      unique_id: foxess_inv1_battery_efficiency
      unit_of_measurement: "%"
      state_class: measurement
      state: >
        {% set input = states('sensor.charge_energy_total') | float(default=0) %}
        {% set holding = states('sensor.battery_energy') | float(default=0) %}
        {% set output = states('sensor.discharge_energy_total') | float(default=0) %}
        {% set used = input - holding %}
        {% set result = (output / used * 100) | round(1) if used > 0 and output > 0 and holding > 0 else None %}
        {{ result }}

    # Flag when the inverter is in EPS Mode
    - name: "EPS Mode"
      unique_id: foxess_inv1_eps_mode
      state_class: measurement
      state: >
        {% set rvolt = states('sensor.rvolt') | float(default=0) %}
        {% set eps_mode = 0 if rvolt > 80 else 1 %}
        {{ eps_mode }}
    # calculate power flowing into inverter from solar, battery and grid
    - name: "Inverter Power In"
      device_class: "power"
      unique_id: foxess_inv1_inverter_power_in
      unit_of_measurement: "kW"
      state_class: measurement
      state: >
        {% set pv_power_in = states('sensor.pv_power_now') | float(default=0) %}
        {% set rpower = states('sensor.rpower') | float(default=0) %}
        {% set spower = states('sensor.spower') | float(default=0) %}
        {% set tpower = states('sensor.tpower') | float(default=0) %}
        {% set ac_power = rpower + spower + tpower %}
        {% set ac_power_in = 0.0 if ac_power > 0.0 else ac_power * -1.0 %}
        {% set bat_power_in = states('sensor.battery_discharge') | float(default=0) %}
        {% set power_in = pv_power_in + ac_power_in + bat_power_in %}
        {{ power_in | round(3) }}
    # calculate power flowing out of inverter
    - name: "Inverter Power Out"
      device_class: "power"
      unique_id: foxess_inv1_inverter_power_out
      unit_of_measurement: "kW"
      state_class: measurement
      state: >
        {% set rpower = states('sensor.rpower') | float(default=0) %}
        {% set spower = states('sensor.spower') | float(default=0) %}
        {% set tpower = states('sensor.tpower') | float(default=0) %}
        {% set ac_power = rpower + spower + tpower %}
        {% set ac_power_out = 0 if ac_power < 0.0 else ac_power %}
        {% set eps_rpower = states('sensor.eps_rpower') | float(default=0) %}
        {% set eps_spower = states('sensor.eps_spower') | float(default=0) %}
        {% set eps_tpower = states('sensor.eps_tpower') | float(default=0) %}
        {% set eps_mode = states('sensor.eps_mode') | int(default=0) %}
        {% set eps_power = 0.0 if eps_mode == 0 else (eps_rpower + eps_spower + eps_tpower) %}
        {% set bat_power_out = states('sensor.battery_charge') | float(default=0) %}
        {% set power_out = ac_power_out + eps_power + bat_power_out %}
        {{ power_out | round(3) }}
    # calculate sytem losses
    - name: "System Losses"
      device_class: "power"
      unique_id: foxess_inv1_system_losses
      unit_of_measurement: "kW"
      state_class: measurement
      state: >
        {% set power_in = states('sensor.inverter_power_in') | float(default=0) %}
        {% set power_out = states('sensor.inverter_power_out') | float(default=0) %}
        {% set losses = power_in - power_out %}
        {{ losses | round(3) }}
    # calculate inverter efficiency % using the difference between power in and power out
    - name: "Inverter Efficiency"
      unique_id: foxess_inv1_inverter_efficiency
      unit_of_measurement: "%"
      state_class: measurement
      state: >
        {% set power_out = states('sensor.inverter_power_out') | float(default=0) %}
        {% set power_in = states('sensor.inverter_power_in') | float(default=0) %}
        {% set efficiency = power_out / power_in * 100 if power_in > 0 else 100 %}
        {% set efficiency = 100 if efficiency > 100 else efficiency %}
        {{ efficiency | round(1) }}
    # calculate inverter efficiency % using the difference between energy in and energy out
    - name: "Inverter Efficiency Daily"
      unique_id: foxess_inv1_inverter_efficiency_daily
      unit_of_measurement: "%"
      state_class: measurement
      state: >
        {% set energy_out = states('sensor.inverter_energy_out_daily') | float(default=0) %}
        {% set energy_in = states('sensor.inverter_energy_in_daily') | float(default=0) %}
        {% set efficiency = energy_out / energy_in * 100 if energy_in > 0.0 else 100 %}
        {% set efficiency = 100 if efficiency > 100 else efficiency %}
        {{ efficiency | round(1) }}
    # calculate system efficiency % using the difference between energy in and energy out
    - name: "System Efficiency Total"
      unique_id: foxess_inv1_system_efficiency_total
      unit_of_measurement: "%"
      state_class: measurement
      state: >
        {% set pv_in = states('sensor.pv_energy_total') | float(default=0) %}
        {% set grid = states('sensor.grid_consumption_energy_total') | float(default=0) %}
        {% set feedin = states('sensor.feed_in_energy_total') | float(default=0) %}
        {% set load = states('sensor.load_energy_correction') | float(default=0) %}
        {% set efficiency = (feedin + load) / (pv_in + grid) * 100 if (pv_in + grid) > 0.0 else None %}
        {{ efficiency | round(1) }}

    # calculate grid dependency - difference between load power consumed and solar power generated
    - name: "Grid Dependency Today"
      unique_id: foxess_inv1_grid_dependency_today
      unit_of_measurement: "kWh"
      state_class: measurement
      state: >
        {% set load = states('sensor.load_daily') | float(default=-1) %}
        {% set pv = states('sensor.pv_energy_daily') | float(default=-1) %}
        {% set result = (load - pv) | round(2) if load >= 0.0 or pv >= 0.0 else 0 %}
        {{ result }}
    # calculate grid balance - difference between grid power imported and exported
    - name: "Grid Balance Today"
      unique_id: foxess_inv1_grid_balance_today
      unit_of_measurement: "kWh"
      state_class: measurement
      state: >
        {% set grid = states('sensor.grid_daily') | float(default=-1) %}
        {% set feedin = states('sensor.feedin_daily') | float(default=-1) %}
        {% set result = (feedin - grid) | round(2) if grid >= 0.0 and feedin >= 0.0 else 0 %}
        {{ result }}

    # calculate self sufficiency today - ratio of grid usage to house load
    - name: "Self Sufficiency Today"
      unique_id: foxess_inv1_self_sufficiency_today
      unit_of_measurement: "%"
      state_class: measurement
      state: >
        {% set grid = states('sensor.grid_daily') | float(default=-1) %}
        {% set load = states('sensor.load_daily') | float(default=-1) %}
        {% set load = 0.01 if load == 0.0 else load %}
        {% set result = (100 - grid / load * 100) | round(1) if grid >= 0 and load >= 0 else None %}
        {{ result }}

    # calculate self sufficiency total - ratio of grid usage to house load
    - name: "Self Sufficiency Total"
      unique_id: foxess_inv1_self_sufficiency_total
      unit_of_measurement: "%"
      state_class: measurement
      state: >
        {% set grid = states('sensor.grid_consumption_energy_total') | float(default=-1) %}
        {% set load = states('sensor.load_energy_correction') | float(default=-1) %}
        {% set load = 0.01 if load == 0.0 else load %}
        {% set result = (100 - grid / load * 100) | round(1) if grid >= 0 and load >= 0 else None %}
        {{ result }}

    # calculate net self sufficiency today - ratio of net grid usage to house load
    - name: "Net Self Sufficiency Today"
      unique_id: foxess_inv1_net_self_sufficiency_today
      unit_of_measurement: "%"
      state_class: measurement
      state: >
        {% set grid = states('sensor.grid_daily') | float(default=-1) %}
        {% set feedin = states('sensor.feedin_daily') | float(default=-1) %}
        {% set load = states('sensor.load_daily') | float(default=-1) %}
        {% set load = 0.01 if load == 0.0 else load %}
        {% set result = (100 - (grid - feedin) / load * 100) | round(1) if grid >= 0 and load >= 0 and feedin >= 0 else None %}
        {{ result }}

    # calculate net self sufficiency total - ratio of net grid usage to house load
    - name: "Net Self Sufficiency Total"
      unique_id: foxess_inv1_net_self_sufficiency_total
      unit_of_measurement: "%"
      state_class: measurement
      state: >
        {% set grid = states('sensor.grid_consumption_energy_total') | float(default=-1) %}
        {% set feedin = states('sensor.feed_in_energy_total') | float(default=-1) %}
        {% set load = states('sensor.load_energy_correction') | float(default=-1) %}
        {% set load = 0.01 if load == 0.0 else load %}
        {% set result = (100 - (grid - feedin) / load * 100) | round(1) if grid >= 0 and load >= 0 and feedin >= 0 else None %}
        {{ result }}

    # battery charge and discharge
    - name: "Battery Discharge"
      device_class: "power"
      unique_id: foxess_inv1_battery_discharge
      unit_of_measurement: "kW"
      state_class: measurement
      state: >
        {% set result = states('sensor.batpower') | float(default=0) %}
        {% set result = 0.0 if result < 0.0 else result %}
        {{ result }}
    - name: "Battery Charge"
      device_class: "power"
      unique_id: foxess_inv1_battery_charge
      unit_of_measurement: "kW"
      state_class: measurement
      state: >
        {% set result = states('sensor.batpower') | float(default=0) %}
        {% set result = 0.0 if result > 0.0 else result * -1 %}
        {{ result }}
    # running total of the charge and discharge energy through the battery
    - name: "Battery Energy Total"
      device_class: "energy"
      unique_id: foxess_inv1_battery_energy_total
      unit_of_measurement: "kWh"
      state_class: total
      state: >
        {% set charge = states('sensor.charge_energy_total') | float(default=-1) %}
        {% set discharge = states('sensor.discharge_energy_total') | float(default=-1) %}
        {% set correction = states('input_number.throughput_correction') | float(default=0) %}
        {% set result = charge + discharge + correction if charge >= 0 and discharge > 0 else None %}
        {{ result }}
    # battery energy average per BMS cycle
    - name: "Battery Energy per Cycle"
      unique_id: foxess_inv1_battery_energy_per_cycle
      unit_of_measurement: "kWh"
      state_class: measurement
      state: >
        {% set total = states('sensor.battery_energy_total') | float(default=0) %}
        {% set cycles = states('sensor.bms_cycle_count') | float(default=0) %}
        {% set result = (total / cycles) | round(1) if total > 0 and cycles > 0 else None %}
        {{ result }}
    # separate grid import and export power based on sign of grid CT and/or meter
    - name: "Feed In Power"
      device_class: "power"
      unique_id: foxess_inv1_feed_in_power
      unit_of_measurement: "kW"
      state_class: measurement
      state: >
        {% set ct1 = states('sensor.grid_ct') | float(default=0) %}
        {% set ct1_handling = states('input_number.ct1_handling') | int(default=0) %}
        {% set ct1 = ct1 * -1.0 if ct1_handling == 1 else ct1 %}
        {% set rgrid = states('sensor.meter_rpower') | float(default=0) %}
        {% set sgrid = states('sensor.meter_spower') | float(default=0) %}
        {% set tgrid = states('sensor.meter_tpower') | float(default=0) %}
        {% set power = ct1 + rgrid + sgrid + tgrid %}
        {% set result = 0 if power < 0.0 else power | round(3) %}
        {{ result }}
    - name: "Grid Consumption"
      device_class: "power"
      unique_id: foxess_inv1_grid_consumption
      unit_of_measurement: "kW"
      state_class: measurement
      state: >
        {% set ct1 = states('sensor.grid_ct') | float(default=0) %}
        {% set ct1_handling = states('input_number.ct1_handling') | int(default=0) %}
        {% set ct1 = ct1 * -1.0 if ct1_handling == 1 else ct1 %}
        {% set rgrid = states('sensor.meter_rpower') | float(default=0) %}
        {% set sgrid = states('sensor.meter_spower') | float(default=0) %}
        {% set tgrid = states('sensor.meter_tpower') | float(default=0) %}
        {% set power = ct1 + rgrid + sgrid + tgrid %}
        {% set result = 0 if power > 0.0 else (power * -1.0) | round(3) %}
        {{ result }}
    - name: "Load Power"
      device_class: "power"
      unique_id: foxess_inv1_load_power
      unit_of_measurement: "kW"
      state_class: measurement
      state: >
        {% set ct1 = states('sensor.grid_ct') | float(default=0) %}
        {% set ct1_handling = states('input_number.ct1_handling') | int(default=0) %}
        {% set ct1 = ct1 * -1.0 if ct1_handling == 1 else ct1 %}
        {% set rgrid = states('sensor.meter_rpower') | float(default=0) %}
        {% set sgrid = states('sensor.meter_spower') | float(default=0) %}
        {% set tgrid = states('sensor.meter_tpower') | float(default=0) %}
        {% set grid = ct1 + rgrid + sgrid + tgrid %}
        {% set ct2 = states('sensor.ct2') | float(default=0) %}
        {% set ct2_handling = states('input_number.ct2_handling') | int(default=1) %}
        {% set ct2 = 0.0 if ct2_handling == 0 else ct2 | abs %}
        {% set rpower = states('sensor.rpower') | float(default=0) %}
        {% set spower = states('sensor.spower') | float(default=0) %}
        {% set tpower = states('sensor.tpower') | float(default=0) %}
        {% set ac_power = rpower + spower + tpower %}
        {% set eps_rpower = states('sensor.eps_rpower') | float(default=0) %}
        {% set eps_spower = states('sensor.eps_spower') | float(default=0) %}
        {% set eps_tpower = states('sensor.eps_tpower') | float(default=0) %}
        {% set eps_mode = states('sensor.eps_mode') | int(default=0) %}
        {% set eps_power = (eps_rpower + eps_spower + eps_tpower) if eps_mode == 1 else 0.0 %}
        {% set result = ac_power + eps_power - grid + ct2 %}
        {{ result }}
    # correct Load Energy Total sensor value
    - name: "Load Energy Correction"
      device_class: "energy"
      unique_id: foxess_inv1_load_energy_corrected
      unit_of_measurement: "kWh"
      state_class: total
      state: >
        {% set value = states('sensor.load_energy_total') | float(default=0) %}
        {% set correction = states('input_number.load_correction') | float(default=0) %}
        {% set value = (value - correction) | round(1) if value >= correction else value %}
        {{ value }}
    - name: "BatPower"
      device_class: "power"
      unique_id: foxess_inv1_batpower
      unit_of_measurement: "kW"
      state_class: measurement
      state: >
        {% set power = states('sensor.battery_discharge_power') | float(default=0) %}
        {% set result = power %}
        {{ result }}
    # sum power being produced by PV strings
    - name: "PV Power Now"
      device_class: "power"
      unique_id: foxess_inv1_pv_power_now
      unit_of_measurement: "kW"
      state_class: measurement
      state: >
        {% set pv1 = states('sensor.pv1_power') | float(default=0) %}
        {% set pv2 = states('sensor.pv2_power') | float(default=0) %}
        {% set pv3 = states('sensor.pv3_power') | float(default=0) %}
        {% set pv4 = states('sensor.pv4_power') | float(default=0) %}
        {% set pv = pv1 + pv2 + pv3 + pv4 %}
        {% set pv = 0.0 if pv < 0.0 else pv %}
        {{ pv }}
    - name: "CT2 Power Now"
      device_class: "power"
      unique_id: foxess_inv1_ct2_power_now
      unit_of_measurement: "kW"
      state_class: measurement
      state: >
        {% set enable = states('sensor.meter_2_connection_code') | int(default=1) %}
        {% set ct2 = states('sensor.ct2') | float(default=0) %}
        {% set ct2_handling = states('input_number.ct2_handling') | int(default=2) %}
        {% set ct2 = -ct2 if ct2_handling in [1,3] else ct2 %}
        {% set result = 0.0 if enable == 0 or ct2 < 0.0 else (ct2 / 0.92) | round(3) %}
        {{ result }}
    - name: "PV Power Total"
      device_class: "power"
      unique_id: foxess_inv1_pv_power_total
      unit_of_measurement: "kW"
      state_class: measurement
      state: >
        {% set pv1 = states('sensor.pv_power_now') | float(default=0) %}
        {% set ct2 = states('sensor.ct2_power_now') | float(default=0) %}
        {% set pv = pv1 + ct2 %}
        {% set pv = 0.0 if pv < 0.0 else pv %}
        {{ pv }}
    - name: "Work Mode"
      unique_id: foxess_inv1_work_mode
      icon: "mdi:cog"
      state: >
        {% set code = states('sensor.work_mode_code') | int(default=-1) %}
        {% set result = 'Self Use' if code == 0 else None %}
        {% set result = 'Feed In First' if code == 1 else result %}
        {% set result = 'Backup' if code == 2 else result %}
        {% set result = 'WeakGridAdj' if code == 3 else result %}
        {% set result = 'Power Station' if code == 4 else result %}
        {% set result = 'Peak Shaving' if code == 5 else result %}
        {% set result = 'ForceCharge' if code == 6 else result %}
        {% set result = 'ForceDischarge' if code == 7 else result %}
        {{ result }}
    - name: "Grid Safety Setting"
      unique_id: foxess_inv1_grid_safety_setting
      icon: "mdi:transmission-tower"
      state: >
        {% set code = states('sensor.grid_code') | int(default=-1) %}
        {% set result = 'G98_UK' if code == 2 else None %}
        {% set result = 'G99_UK' if code == 3 else result %}
        {% set result = code if code > 3 else result %}
        {{ result }}
    - name: "Language Setting"
      unique_id: foxess_inv1_language_setting
      icon: "mdi:cog"
      state: >
        {% set code = states('sensor.language_code') | int(default=0) %}
        {% set result = 'English' if code == 0 else None %}
        {% set result = 'German' if code == 1 else result %}
        {% set result = 'Spanish' if code == 2 else result %}
        {% set result = 'Italian' if code == 3 else result %}
        {% set result = code if code > 3 else result %}
        {{ result }}
    - name: "PV Config Setting"
      unique_id: foxess_inv1_pv_config_setting
      icon: "mdi:view-parallel"
      state: >
        {% set code = states('sensor.pv_config_code') | int(default=-1) %}
        {% set result = 'Independent' if code == 0 else None %}
        {% set result = 'Parallel' if code == 1 else result %}
        {% set result = code if code > 1 else result %}
        {{ result }}
    - name: "Meter 1 Setting"
      unique_id: foxess_inv1_meter1_setting
      icon: "mdi:meter-electric"
      state: >
        {% set code = states('sensor.meter_1_code') | int(default=-1) %}
        {% set result = 'Meter_1ph' if code == 0 else None %}
        {% set result = 'CT' if code == 1 else result %}
        {% set result = 'Disabled' if code == 2 else result %}
        {% set result = 'Meter_3ph' if code == 3 else result %}
        {% set result = code if code > 3 else result %}
        {{ result }}
    - name: "Meter 1 Connection"
      unique_id: foxess_inv1_meter1_connection
      icon: "mdi:network"
      state: >
        {% set code = states('sensor.meter_1_connection_code') | int(default=-1) %}
        {% set result = 'Not Connected' if code == 0 else None %}
        {% set result = 'OK' if code == 1 else result %}
        {% set result = code if code > 1 else result %}
        {{ result }}
    - name: "Meter 2 Setting"
      unique_id: foxess_inv1_meter2_setting
      icon: "mdi:meter-electric"
      state: >
        {% set code = states('sensor.meter_2_code') | int(default=-1) %}
        {% set result = 'Meter_1ph' if code == 0 else None %}
        {% set result = 'CT' if code == 1 else result %}
        {% set result = 'Disabled' if code == 2 else result %}
        {% set result = 'Meter_3ph' if code == 3 else result %}
        {% set result = code if code > 3 else result %}
        {{ result }}
    - name: "Meter 2 Connection"
      unique_id: foxess_inv1_meter2_connection
      icon: "mdi:network"
      state: >
        {% set code = states('sensor.meter_2_connection_code') | int(default=-1) %}
        {% set result = 'Not Connected' if code == 0 else None %}
        {% set result = 'OK' if code == 1 else result %}
        {% set result = code if code > 1 else result %}
        {{ result }}
    - name: "BMS Connection"
      unique_id: foxess_inv1_bms_connection
      icon: "mdi:network"
      state: >
        {% set code = states('sensor.bms_connection_code') | int(default=-1) %}
        {% set result = 'Initialising' if code == 0 else None %}
        {% set result = 'OK' if code == 1 else result %}
        {% set result = 'Not Connected' if code == 2 else result %}
        {% set result = code if code > 2 else result %}
        {{ result }}
    - name: "BMS Status"
      unique_id: foxess_inv1_bms_status
      icon: "mdi:list-status"
      state: >
        {% set code = states('sensor.battery_status_code') | int(default=-1) %}
        {% set result = 'Idle' if code == 0 else None %}
        {% set result = 'Normal' if code == 1 else result %}
        {% set result = 'Offline' if code == 2 else result %}
        {% set result = code if code > 2 else result %}
        {{ result }}
    - name: "EPS Frequency Setting"
      unique_id: foxess_inv1_eps_frequency_setting
      device_class: frequency
      unit_of_measurement: "Hz"
      icon: "mdi:cog"
      state: >
        {% set code = states('sensor.eps_frequency_code') | int(default=-1) %}
        {% set result = 50.0 if code == 0 else None %}
        {% set result = 60.0 if code == 1 else result %}
        {{ result }}
    - name: "Inverter State"
      unique_id: foxess_inv1_state
      icon: "mdi:play"
      state: >
        {% set state = states('sensor.inverter_state_code') | int(default=-2) %}
        {% set model = states('sensor.inverter_model') %}
        {% set state = state - 1 if model[0] =='K' and state <=7 else state %}
        {% set result = 'Self Test' if state == -1 else None %}
        {% set result = 'Waiting' if state == 0 else result %}
        {% set result = 'Checking' if state == 1 else result %}
        {% set result = 'On Grid' if state == 2 else result %}
        {% set result = 'Off Grid / EPS' if state == 3 else result %}
        {% set result = 'Fault (recoverable)' if state == 4 else result %}
        {% set result = 'Fault (not recoverable)' if state == 5 else result %}
        {% set result = state if state in (6,7) else result %}
        {% set result = 'Idle / Upgrading' if state == 8 else result %}
        {{ result }}
    - name: "Time Period 1"
      unique_id: foxess_inv1_time_period_1
      icon: "mdi:calendar-clock"
      state: >
        {% set s = states('sensor.time_period_1_start') | int(default=-1) %}
        {% set start_time = ('0' + (s // 256) | string)[-2:] + '.' + ('0' + (s % 256) | string)[-2:] %}
        {% set e = states('sensor.time_period_1_end') | int(default=-1) %}
        {% set end_time = ('0' + (e // 256) | string)[-2:] + '.' + ('0' + (e % 256) | string)[-2:] %}
        {% set enabled = states('sensor.time_period_1_enabled') | int(default=-1) %}
        {% set action = 'Charge from grid: ' if enabled == 1 else 'Battery Hold: ' %}
        {% set result = 'Not configured' if s == 0 and e == 0 else action + start_time + ' - ' + end_time %}
        {% set result = None if s <= -1 or e <= -1 or enabled <= -1 else result %}
        {{ result }}
    - name: "Time Period 2"
      unique_id: foxess_inv1_time_period_2
      icon: "mdi:calendar-clock"
      state: >
        {% set s = states('sensor.time_period_2_start') | int(default=-1) %}
        {% set start_time = ('0' + (s // 256) | string)[-2:] + '.' + ('0' + (s % 256) | string)[-2:] %}
        {% set e = states('sensor.time_period_2_end') | int(default=-1) %}
        {% set end_time = ('0' + (e // 256) | string)[-2:] + '.' + ('0' + (e % 256) | string)[-2:] %}
        {% set enabled = states('sensor.time_period_2_enabled') | int(default=-1) %}
        {% set action = 'Charge from grid: ' if enabled == 1 else 'Battery Hold: ' %}
        {% set result = 'Not configured' if s == 0 and e == 0 else action + start_time + ' - ' + end_time %}
        {% set result = None if s <= -1 or e <= -1 or enabled <= -1 else result %}
        {{ result }}

    # Inverter Version decode
    - name: "Master Version"
      unique_id: foxess_inv1_master_version
      state: >
        {% set version =  states('sensor.master_version_code') | int(default=0) %}
        {% set result = (version / 100) | round(2) %}
        {% set v2 = ("0" + ("%0x" | format(version % 256)))[-2:] %}
        {% set version = version // 256 %}
        {% set v1 = ("0" + ("%0x" | format(version % 256)))[-2:] %}
        {% set hex_result = v1  + '.' + v2 %}
        {% set hex_encoding =  states('sensor.hex_encoding') | int(default=0) %}
        {% set result = hex_result if hex_encoding == 1 else result %}
        {{ result }}
    - name: "Slave Version"
      unique_id: foxess_inv1_slave_version
      state: >
        {% set version =  states('sensor.slave_version_code') | int(default=0) %}
        {% set result = (version / 100) | round(2) %}
        {% set v2 = ("0" + ("%0x" | format(version % 256)))[-2:] %}
        {% set version = version // 256 %}
        {% set v1 = ("0" + ("%0x" | format(version % 256)))[-2:] %}
        {% set hex_result = v1  + '.' + v2 %}
        {% set hex_encoding =  states('sensor.hex_encoding') | int(default=0) %}
        {% set result = hex_result if hex_encoding == 1 else result %}
        {{ result }}
    - name: "Manager Version"
      unique_id: foxess_inv1_manager_version
      state: >
        {% set version =  states('sensor.manager_version_code') | int(default=0) %}
        {% set result = (version / 100) | round(2) %}
        {% set v2 = ("0" + ("%0x" | format(version % 256)))[-2:] %}
        {% set version = version // 256 %}
        {% set v1 = ("0" + ("%0x" | format(version % 256)))[-2:] %}
        {% set hex_result = v1  + '.' + v2 %}
        {% set hex_encoding =  states('sensor.hex_encoding') | int(default=0) %}
        {% set result = hex_result if hex_encoding == 1 else result %}
        {{ result }}
    # BMS Module Type decode
    - name: "BMS Model"
      unique_id: foxess_inv1_bms_model
      state: >
        {% set t = states('sensor.bms_module_type') | int(default=0) %}
        {% set result = 'HV BMS v1' if t == 82 else None %}
        {% set result = 'ECS4100 v1' if t == 83 else result %}
        {% set result = 'HV BMS v2' if t == 84 else result %}
        {{ result }}
    # BMS Subsystem Number decode
    - name: "Battery Model"
      unique_id: foxess_inv1_battery_model
      state: >
        {% set t = states('sensor.bms_subsystem_number') | int(default=-256) // 256 %}
        {% set result = 'HV2600' if t == 0 else None %}
        {% set result = 'ECS4100 v1' if t == 7 else result %}
        {{ result }}
    # BMS firmware version decode
    - name: "BMS Version"
      unique_id: foxess_inv1_bms_version
      state: >
        {% set c = states('sensor.bms_version_code') | int(default=0) %}
        {% set h = c // 256 %}
        {% set v1 = ('0' + ((h // 16) | string))[-2:] %}
        {% set v2 = ('0' + ((h % 16) | string))[-2:] %}
        {% set v3 = ('00' + ((c % 256) | string))[-3:] %}
        {% set result = 'M: ' + v1 + '.' + v2 + '.' + v3 if c > 0 else None %}
        {{ result }}
    # Battery firmware version decode
    - name: "Battery 1 Version"
      unique_id: foxess_inv1_battery_1_version
      state: >
        {% set c = states('sensor.battery_1_version_code') | int(default=0) %}
        {% set h = c // 256 %}
        {% set l = c % 256 %}
        {% set n = (h // 16)|string %}
        {% set v1 = ('0' + ((h % 16) | string))[-2:] %}
        {% set v2 = ('0' + ((l // 16) | string))[-2:] %}
        {% set v3 = ('0' + ((l % 16) | string))[-2:] %}
        {% set result = 'S' + n + ': 0' + n + '.' + v1 + '.' + v2 + '.' + v3 if c > 0 else None %}
        {{ result }}
    - name: "Battery 2 Version"
      unique_id: foxess_inv1_battery_2_version
      state: >
        {% set c = states('sensor.battery_2_version_code') | int(default=0) %}
        {% set h = c // 256 %}
        {% set l = c % 256 %}
        {% set n = (h // 16)|string %}
        {% set v1 = ('0' + ((h % 16) | string))[-2:] %}
        {% set v2 = ('0' + ((l // 16) | string))[-2:] %}
        {% set v3 = ('0' + ((l % 16) | string))[-2:] %}
        {% set result = 'S' + n + ': 0' + n + '.' + v1 + '.' + v2 + '.' + v3 if c > 0 else None %}
        {{ result }}
    - name: "Battery 3 Version"
      unique_id: foxess_inv1_battery_3_version
      state: >
        {% set c = states('sensor.battery_3_version_code') | int(default=0) %}
        {% set h = c // 256 %}
        {% set l = c % 256 %}
        {% set n = (h // 16)|string %}
        {% set v1 = ('0' + ((h % 16) | string))[-2:] %}
        {% set v2 = ('0' + ((l // 16) | string))[-2:] %}
        {% set v3 = ('0' + ((l % 16) | string))[-2:] %}
        {% set result = 'S' + n + ': 0' + n + '.' + v1 + '.' + v2 + '.' + v3 if c > 0 else None %}
        {{ result }}
    - name: "Battery 4 Version"
      unique_id: foxess_inv1_battery_4_version
      state: >
        {% set c = states('sensor.battery_4_version_code') | int(default=0) %}
        {% set h = c // 256 %}
        {% set l = c % 256 %}
        {% set n = (h // 16)|string %}
        {% set v1 = ('0' + ((h % 16) | string))[-2:] %}
        {% set v2 = ('0' + ((l // 16) | string))[-2:] %}
        {% set v3 = ('0' + ((l % 16) | string))[-2:] %}
        {% set result = 'S' + n + ': 0' + n + '.' + v1 + '.' + v2 + '.' + v3 if c > 0 else None %}
        {{ result }}
    - name: "Battery 5 Version"
      unique_id: foxess_inv1_battery_5_version
      state: >
        {% set c = states('sensor.battery_5_version_code') | int(default=0) %}
        {% set h = c // 256 %}
        {% set l = c % 256 %}
        {% set n = (h // 16)|string %}
        {% set v1 = ('0' + ((h % 16) | string))[-2:] %}
        {% set v2 = ('0' + ((l // 16) | string))[-2:] %}
        {% set v3 = ('0' + ((l % 16) | string))[-2:] %}
        {% set result = 'S' + n + ': 0' + n + '.' + v1 + '.' + v2 + '.' + v3 if c > 0 else None %}
        {{ result }}
    - name: "Battery 6 Version"
      unique_id: foxess_inv1_battery_6_version
      state: >
        {% set c = states('sensor.battery_6_version_code') | int(default=0) %}
        {% set h = c // 256 %}
        {% set l = c % 256 %}
        {% set n = (h // 16)|string %}
        {% set v1 = ('0' + ((h % 16) | string))[-2:] %}
        {% set v2 = ('0' + ((l // 16) | string))[-2:] %}
        {% set v3 = ('0' + ((l % 16) | string))[-2:] %}
        {% set result = 'S' + n + ': 0' + n + '.' + v1 + '.' + v2 + '.' + v3 if c > 0 else None %}
        {{ result }}
    - name: "Battery 7 Version"
      unique_id: foxess_inv1_battery_7_version
      state: >
        {% set c = states('sensor.battery_7_version_code') | int(default=0) %}
        {% set h = c // 256 %}
        {% set l = c % 256 %}
        {% set n = (h // 16)|string %}
        {% set v1 = ('0' + ((h % 16) | string))[-2:] %}
        {% set v2 = ('0' + ((l // 16) | string))[-2:] %}
        {% set v3 = ('0' + ((l % 16) | string))[-2:] %}
        {% set result = 'S' + n + ': 0' + n + '.' + v1 + '.' + v2 + '.' + v3 if c > 0 else None %}
        {{ result }}
    - name: "Battery 8 Version"
      unique_id: foxess_inv1_battery_8_version
      state: >
        {% set c = states('sensor.battery_8_version_code') | int(default=0) %}
        {% set h = c // 256 %}
        {% set l = c % 256 %}
        {% set n = (h // 16)|string %}
        {% set v1 = ('0' + ((h % 16) | string))[-2:] %}
        {% set v2 = ('0' + ((l // 16) | string))[-2:] %}
        {% set v3 = ('0' + ((l % 16) | string))[-2:] %}
        {% set result = 'S' + n + ': 0' + n + '.' + v1 + '.' + v2 + '.' + v3 if c > 0 else None %}
        {{ result }}
    - name: "Remote Setting"
      unique_id: foxess_inv1_remote_setting
      state: >
        {% set time = states('input_number.remote_time') | int(default=0) | string %}
        {% set power = states('input_number.remote_power') | float(default=0) %}
        {% set fn = 'Charge' if power < 0 else 'Discharge' if power > 0 else 'None' %}
        {% set kw = power | abs | string %}
        {% set result = fn + ': ' + kw + ' kW, ' + time + ' mins' %}
        {{ result }}

    # pvoutput.org upload using CSV format
    # %1 = date YYYYMMDD, %2 = generated Wh, %3 = exported Wh, %11 = imported Wh, %14 = consumption Wh
    - name: "PVOutput Data"
      unique_id: foxess_inv1_pvoutput_data
      state: >
        {% set dat = now().year|string + ('0' + (now().month|string))[-2:] + ('0' + (now().day|string))[-2:] %}
        {% set gen = states('sensor.pv_total_daily') | float(default=-1) * 1000 %}
        {% set gen = '' if gen < 0 else gen | int | string %}
        {% set exp = states('sensor.feed_in_energy_today') | float(default=-1) * 1000 %}
        {% set exp = '' if exp < 0 else exp | int | string %}
        {% set con = states('sensor.load_daily') | float(default=-1) * 1000 %}
        {% set con = '' if con < 0 else con | int | string %}
        {% set imp = states('sensor.grid_consumption_energy_today') | float(default=-1) * 1000 %}
        {% set imp = '' if imp < 0 else imp | int | string %}
        {% set result = dat + ',' + gen + ',' + exp + ',,,,,,,0,' + imp + ',0,0,' + con + ',,,,' %}
        {{ result }}

  #-----------------------------------------------------------------------------
  # END: template.yaml include file for HA-FoxESS-Modbus
  #-----------------------------------------------------------------------------
